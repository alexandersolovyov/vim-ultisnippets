*html-snippets.rux*	HTML snippets for UltiSnips *html-snippets* *snippets-html*

		Сниппеты в стиле Emmet для плагина UltiSnips
				для файлов HTML

Author: Alexander Solovyov <alexander-solovyov@yandex.ru>
Repository: {https://github.com/alexandersolovyov/snippets-ultisnips}
Snippets file: {<path-to-snippets>/html.snippets}
License: GNU GPLv2

================================================================================
Cодержание

Общие сведения					|html-snippets-notes|
Установка					|html-snippets-install|
Добавление сниппетов				|html-snippets-addsnippet|

1.Шаблоны					|html-snippets-templates|
2.HTML-элементы					|html-snippets-elements|
  Особые элементы			|html-snippets-elements-special|
  Строчные элементы			|html-snippets-elements-inline|
  Блочные элементы			|html-snippets-elements-block|
3.Часто используемые				|html-snippets-misc|
  Любые элементы			|html-snippets-misc-any_block|
  Особые атрибуты			|html-snippets-misc-spec_attributes|
  Любые атрибуты			|html-snippets-misc-any_attributes|

================================================================================
ОБЩИЕ СВЕДЕНИЯ					*html-snippets-notes*

В этом документе приведен справочник сокращений, используемых сниппетами
для плагина UltiSnips для упрощения работы с файлами HTML.

Для использования сниппета - просто введите нужное сокращение
и нажмите клавишу-триггер (по-умолчанию <Tab>).

Далее, если упоминается клавиша <Tab>, это значит "клавиша-триггер
для UltiSnips" - её можно изменить с помощью переменной в файле .vimrc.

В описаниях сниппетов - в тексте, в который разворачивается сниппет -
значения в фигурных скобках {} - это значения по-умолчанию, которые
можно будет сразу изменить, и между которыми можно перемещаться.

================================================================================
УСТАНОВКА						*html-snippets-install*

Для правильной работы сниппетов, файл со сниппетами {html.snippets}
должен находиться в одной из папок со сниппетами UltiSnips.
Такую папку можно создать в любом месте. По умолчанию это должна быть папка
{~/.vim/UltiSnips}.

Можно создать свою папку для сниппетов. Чтобы плагин использовал их,
папки со сниппетами нужно указать в файле {~/.vimrc} с помощью переменной.
Например, если использовать папку {~/.vim/ultisnippets}, добавьте переменную:
>
    let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/ultisnippets']
<
Так можно указать несколько папок сразу, через запятую.

Конечно, файл со сниппетами должен находиться в папке со сниппетами.

Можно подключить эти сниппеты к другим типам файлов.
Для этого первой строкой в файле с именем, соответствующим нужному типу файлов
(в папке сниппетов) должна быть строка с командой 'extends'. Например, для
файлов PHP:
>
    extends php.snippets
<

Если после установки или обновления сниппетов не получается вызвать файл справки,
или файл справки нужно обновить, то перейдите в папку со сниппетами и выполните
скрипт:
>
  cd ~/.vim/ultisnippets/
  ./refresh_doc.sh
<

================================================================================
ДОБАВЛЕНИЕ СНИППЕТОВ					*html-snippets-addsnippet*

Сниппеты находятся в отдельном файле {html.snippets}.

Cниппеты можно изменять как обычно для плагина UltiSnips: смотрите и
редактируйте файл {html.snippets}.

В файле сниппетов все сниппеты разделены на группы точно
так-же, как в данном файле помощи, но порядок сниппетов внутри группы может
отличаться.

================================================================================
1.Шаблоны					|html-snippets-templates|

Эти сокращения используются для быстрого определения групп вложенных элементов.
Например, можно быстро вставить основную разметку для любой страницы.
Можно перемещаться по местам, которые обычно нужно редактировать, но это не
указано в списке ниже.

Список сокращений и соответствующих шаблонов:

html, html:5 или !  ->
>
  <!DOCTYPE html>

  <html dir="ltr" lang="ru">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title></title>
  </head>
  <body>
  </body>
  </html>
<

table ->
>
  <table>
    <tr>
      <td></td>
    </tr>
  </table>
<
ul ->
>
  <ul>
    <li></li>
  </ul>
<

ol ->
>
  <ol>
    <li></li>
  </ol>
<

dl ->
>
  <dl>
    <dt></dt>
    <dd>
    </dd>
  </dl>
<

figure ->
>
  <figure>
    <img src="" alt="" />
    <figcaption></figcaption>
  </figure>
<

colgroup" ->
>
  <colgroup>
    <col span="" />
  </colgroup>
<

Формы - можно в двойных кавычках указать скрипт, принимающий данные
(закрывающие кавычки здесь не обязательны, но ошибкой не будут,
можно ставить пробел перед открывающими кавычками).
Если не указано - свойство "action" не добавляется.

login-form"handler.php ->
>
  <form class="{login-form}" action="handler.php" method="post">
    <p>
      <label for="{who}">{Name:}</label>
      <input type="text" name="{who}" id="{who}" />
    </p>
    <p>
      <label for="{pass}">{Password:}</label>
      <input type="password" name="{pass}" id="{pass}" />
    </p>
    <p>
      <input type="submit" value="{Log In}" />
    </p>
  </form>
<
file-form"handler.php ->
>
  <form class="{file-form}" action="handler.php" enctype="multipart/form-data" method="post">
    <p>
      <label for="{input--file}">{Choose file to send:}</label>
    <p>
      <input type="file" name="{input--file}" />
      <input type="submit" value="{Send}" />
    </p>
  </form>
<

================================================================================
2.HTML-элементы					*html-snippets-elements*

  Особые элементы			*html-snippets-elements-special*

Можно быстро создавать отдельный элемент вместе со свойствами, которые часто
необходимы для него. Для этого нужно ввести название элемента - оно будет развёрнуто
в шаблон элемента, в котором можно будет переключаться между местами, которые нужно
заполнить.
Например:
>
  img
<
будет развёрнуто в
>
  <img src="" alt="" />
<
А также часто можно добавить в двойных кавычках значение некоторого свойства к этому
имени, или ещё одного свойства - в следующих кавычках. Можно вместо этого использовать
кавычки как разделитель, или ставить пробел между кавычками. Значение каких именно свойств
идут в каком порядке - зависит от элемента.
Например, следующие значения будут значить одно и то-же:
>
  button"name"value
  button"name"value"
  button"name""value"
  button"name" "value"
  button "name" "value"
  button "name"value"
<
Рассмотрим это подробнее на примере элемента img:
>
  img"http://some_site/myfile.jpg"
>
- развернётся в
>
  <img src="http://some_site/myfile.jpg" />
<
а также
>
  img"/myfile.jpg"Моя картинка
>
- развернётся в
>
  <img src="/myfile.jpg" alt="Моя картинка" />
<

Можно задавать только первое значение свойства. Но второе значение
без первого задавать нельзя!
Например:
>
  img""Моя картинка
>
работать НЕ БУДЕТ!

Контрольные точки перемещения всегда сделаны так, что можно быстро
добавить ID, класс, или другой атрибут, а также содержимое.

Эти сниппеты кратко описаны ниже.
То, что указано в фигурных скобках {} - это изменяемые параметры, по
которым можно перемещаться.
--------------------------------

br ->
>
<br />
<
button ->
>
  <button id=""></button>
<
button"btn-name ->
>
  <button id="btn-name">

  </button>
<
fbutton"btn-name"val ->
>
  <button id="btn-name" name="btn-name" value="val">

  </button>
<

colgroup ->
>
  <colgroup span="" />
<

col ->
>
  <col span="" />
<

meta-charset ->
>
  <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
<

meta-charset"windows-1251 ->
>
  <meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
<

favicon"icon_file ->
>
  <link rel="icon_file" type="image/x-icon" href="favicon.ico" />
<

input"text"input-name"val
>
  <input type="text" id="input-name" name="input-name" value="val" />
<

link ->
>
  <link rel="{stylesheet}" type="{text/css}" href="" />
<

rss"my_rss.xml ->
>
  <link rel="alternate" type="application/rss+xml" title="RSS" href="my_rss.xml" />
<

script ->
>
  <script>

  </script>
<

script"file
>
  <script src="file"></script>
<

style ->
>
  <style>

  </style>
<

style"file.css ->
>
  <link rel="stylesheet" type="text/css" href="file.css" />
<

a"reference ->
>
 <a href="reference"></a>
<

img"file"alt_text ->
>
  <img src="flie" alt="alt_text" />
<

meta-viewport ->
>
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
<

meta-viewport"ns ->
>
      <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0" />
<

---------------------
  Строчные элементы			*html-snippets-elements-inline*

Простые элементы (без атрибутов) - строчные, разворачиваются в строке,
и перед сокращением должен быть пробел или открывающая угловая скобка '<':
>
  strong	->  <strong></strong>
  em		->  <em></em>
  b		->  <b></b>
  i		->  <i></i>
  q		->  <q></q>
  h1		->  <h1></h1>
  h2		->  <h2></h2>
  h3		->  <h3></h3>
  h4		->  <h4></h4>
  h5		->  <h5></h5>
  h6		->  <h6></h6>
  kbd		->  <kbd></kbd>
  span		->  <span></span>
  figcaption	->  <figcaption></figcaption>
<
Эти сниппеты позволяют ввести атрибуты через пробел после имени
элемента и потом нажать <Tab> например так:
>
  <p>I want to emphasize that em class="red"  ->

  <p>I want to emphasize that <em class="red"></em>
>
Здесь вместо того, чтобы вводить класс, идентификатор или другой
атрибут полностью, можно воспользоваться сокращениями, описанными в
|html-snippets-misc-spec_attributes| или в
|html-snippets-misc-any_attributes|.

Также есть строчные элементы, сокращения которыех будут разворачиваться
только в начале строки. Вот они:
>
  dt
  li
<


---------------------
  Блочные элементы			*html-snippets-elements-block*

Простые элементы - блочные, разворачиваются только на новой строке,
например так:

aside ->
>
  <aside>

  </aside>
<
Эти сниппеты позволяют ввести атрибуты через пробел после имени
элемента, например так:
>
  div id="block1" class="blocks" ->

  <div id="block1" class="blocks">

  </div>
<
Здесь вместо того, чтобы вводить класс, идентификатор или другой
атрибут полностью, можно воспользоваться сокращениями, описанными в
|html-snippets-misc-spec_attributes| или в
|html-snippets-misc-any_attributes|.

Вот список таких элементов:
>
  audio
  article
  aside
  blockquote
  body
  canvas
  code
  div
  footer
  header
  nav
  main
  section
  tbody
  tfoot
  thead
  video
<

Есть блочные элементы, которые будут разворачиваться так же,
но не вставлять строку между тегами, например:
>
  p ->

  <p>
  </p>
<
Вот их список:
>
  p
  dd
<
================================================================================
3.Часто используемые				*html-snippets-misc*

  Любые элементы			*html-snippets-misc-any_block*
Чтобы создать произвольный HTML-элемент, можно ввести
открывающую угловую скобку и любое слово и нажать <Tab>.
Например:
>
  <element
<
будет развернуто в
>
 <element>

 </element>
<
где можно будет перемещаться между местом для ввода атрибутов и местом
для ввода текста.

---------------------
  Особые атрибуты			*html-snippets-misc-spec_attributes*

Можно быстро вводить ID, класс или имя прямо в середине строки,
если добавить в начале символ точку, диез или амперсанд:
>
  .my_class	->  class="my_class"
  #my_id	->  id="my_id"
  &my_name	->  name="my_name"
<
Можно добавить сразу несколько из них с одинаковым значением,
если ввести несколько знаков подряд:
>
  #&my_name	->  id="my_name" name="my_name"
<
Можно вводить сразу несколько классов:
>
  .name1 name2	->  class="name1 name2"
<

---------------------
  Любые атрибуты			*html-snippets-misc-any_attributes*

Можно вводить любые атрибуты без кавычек - если забыли
поставить открывающие кавычки, то нажатие клавиши <Tab> сразу окружит
значение кавычками.
Например:
>
  style=display:none; color:white;
<
развернётся в
>
  style="display:none; color:white;"
<


